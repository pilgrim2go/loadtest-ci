name: Load Test and Comment on PR

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # - name: Set up Kubernetes cluster with KinD
    #   run: |
    #     curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
    #     chmod +x ./kind
    #     sudo mv ./kind /usr/local/bin/kind
    #     # setup 2 nodes kind cluster with ingress-nginx
    #     bash ./kubernetes/kind-config.sh

    # - name: Set up kubectl
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y kubectl

    # - name: Apply Ingress Controller
    #   run: |
    #     kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
    #     kubectl wait --namespace ingress-nginx \
    #       --for=condition=ready pod \
    #       --selector=app.kubernetes.io/component=controller \
    #       --timeout=90s

    # - name: Deploy http-echo services
    #   run: |
    #     kubectl apply -f kubernetes/foo.yaml
    #     kubectl apply -f kubernetes/bar.yaml
    # - name: Configure Ingress routing
    #   run: |
    #     kubectl apply -f kubernetes/ingress.yaml

    # - name: Ensure deployments are healthy
    #   run: |
    #     kubectl wait --for=condition=available --timeout=60s deployment/foo
    #     kubectl wait --for=condition=available --timeout=60s deployment/bar

    - name: Generate and capture load testing results
      id: parse_results
      run: |
        # sudo apt-get install -y apache2-utils
        # ab -n 1000 -c 10 http://foo.localhost/ > foo_result.txt
        # ab -n 1000 -c 10 http://bar.localhost/ > bar_result.txt
        cat foo_result.txt
        cat bar_result.txt
        parse_ab_result() {
            local result_file=$1
            local prefix=$2
            requests_per_second=$(grep "Requests per second" "$result_file" | awk '{print $4}')
            time_per_request=$(grep "Time per request" "$result_file" | grep "\(mean\)" | awk '{print $4}')
            failed_requests=$(grep "Failed requests" "$result_file" | awk '{print $3}')
            total_requests=$(grep "Complete requests" "$result_file" | awk '{print $3}')
            p90=$(grep -A 1 "Percentage of the requests served within a certain time (ms)" "$result_file" | tail -1 | awk '{print $2}')
            p95=$(grep -A 2 "Percentage of the requests served within a certain time (ms)" "$result_file" | tail -1 | awk '{print $2}')
            p99=$(grep -A 3 "Percentage of the requests served within a certain time (ms)" "$result_file" | tail -1 | awk '{print $2}')
            if [ "$total_requests" -gt 0 ]; then
                failed_requests_percentage=$(echo "scale=2; ($failed_requests / $total_requests) * 100" | bc)
            else
                failed_requests_percentage=0
            fi
            echo "Requests per second: $requests_per_second" > ${prefix}_parsed_results.txt
            echo "Time per request (mean): $time_per_request ms" >> ${prefix}_parsed_results.txt
            echo "Failed requests: $failed_requests ($failed_requests_percentage%)" >> ${prefix}_parsed_results.txt
            echo "Percentiles:" >> ${prefix}_parsed_results.txt
            echo "  p90: $p90 ms" >> ${prefix}_parsed_results.txt
            echo "  p95: $p95 ms" >> ${prefix}_parsed_results.txt
            echo "  p99: $p99 ms" >> ${prefix}_parsed_results.txt
        }
        parse_ab_result foo_result.txt foo
        parse_ab_result bar_result.txt bar
    - name: Post comment on PR
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const fs = require('fs');
          const fooResults = fs.readFileSync('foo_parsed_results.txt', 'utf8');
          const barResults = fs.readFileSync('bar_parsed_results.txt', 'utf8');
          github.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `### Load Testing Results\n\n**Foo**:\n${fooResults}\n\n**Bar**:\n${barResults}`
          });
      